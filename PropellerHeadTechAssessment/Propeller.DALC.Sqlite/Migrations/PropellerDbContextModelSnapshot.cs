// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Propeller.DALC.Sqlite;

#nullable disable

namespace Propeller.DALC.Sqlite.Migrations
{
    [DbContext(typeof(PropellerDbContext))]
    partial class PropellerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("ContactCustomer", b =>
                {
                    b.Property<int>("ContactsID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomersID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ContactsID", "CustomersID");

                    b.HasIndex("CustomersID");

                    b.ToTable("ContactCustomer");
                });

            modelBuilder.Entity("Propeller.Entities.Contact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Propeller.Entities.Country", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultLocale")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            ID = new Guid("2a28502a-abed-4c01-91f7-414f09e94edd"),
                            CountryCode = "NZL",
                            DefaultLocale = "en-NZ",
                            Name = "New Zealand"
                        },
                        new
                        {
                            ID = new Guid("9fb03922-2c31-4e70-9291-96653d599aa5"),
                            CountryCode = "MEX",
                            DefaultLocale = "es-MX",
                            Name = "Mexico"
                        },
                        new
                        {
                            ID = new Guid("a843203b-552f-41c8-b052-9a52f767b681"),
                            CountryCode = "FRA",
                            DefaultLocale = "fr-FR",
                            Name = "France"
                        });
                });

            modelBuilder.Entity("Propeller.Entities.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerStatusID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("CustomerStatusID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Propeller.Entities.CustomerStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("CustomerStatuses");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            State = "prospective"
                        },
                        new
                        {
                            ID = 2,
                            State = "current"
                        },
                        new
                        {
                            ID = 3,
                            State = "non-active"
                        });
                });

            modelBuilder.Entity("Propeller.Entities.Note", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Propeller.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Locale = "en-NZ",
                            Name = "English Administrator",
                            Password = "s3cUrE.p4s5W0Rd.1",
                            Role = 99,
                            UserName = "admin.en@mail.com"
                        },
                        new
                        {
                            ID = 2,
                            Locale = "en-NZ",
                            Name = "English User",
                            Password = "s3cUrE.p4s5W0Rd.2",
                            Role = 1,
                            UserName = "user.en@mail.com"
                        },
                        new
                        {
                            ID = 3,
                            Locale = "es-MX",
                            Name = "Administrador México",
                            Password = "s3cUrE.p4s5W0Rd.1",
                            Role = 99,
                            UserName = "admin.es@mail.com"
                        },
                        new
                        {
                            ID = 4,
                            Locale = "es-MX",
                            Name = "Usuario México",
                            Password = "s3cUrE.p4s5W0Rd.2",
                            Role = 1,
                            UserName = "user.es@mail.com"
                        },
                        new
                        {
                            ID = 5,
                            Locale = "fr-FR",
                            Name = "French Administrateur",
                            Password = "s3cUrE.p4s5W0Rd.1",
                            Role = 99,
                            UserName = "admin.fr@mail.com"
                        },
                        new
                        {
                            ID = 6,
                            Locale = "fr-FR",
                            Name = "French Utilisateur",
                            Password = "s3cUrE.p4s5W0Rd.2",
                            Role = 1,
                            UserName = "user.fr@mail.com"
                        });
                });

            modelBuilder.Entity("ContactCustomer", b =>
                {
                    b.HasOne("Propeller.Entities.Contact", null)
                        .WithMany()
                        .HasForeignKey("ContactsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Propeller.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Propeller.Entities.Customer", b =>
                {
                    b.HasOne("Propeller.Entities.CustomerStatus", "CustomerStatus")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerStatus");
                });

            modelBuilder.Entity("Propeller.Entities.Note", b =>
                {
                    b.HasOne("Propeller.Entities.Customer", "Customer")
                        .WithMany("Notes")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Propeller.Entities.Customer", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("Propeller.Entities.CustomerStatus", b =>
                {
                    b.Navigation("Customers");
                });
#pragma warning restore 612, 618
        }
    }
}
