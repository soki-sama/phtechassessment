// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Propeller.DALC.Sqlite;

#nullable disable

namespace Propeller.DALC.Sqlite.Migrations
{
    [DbContext(typeof(CustomerDbContext))]
    [Migration("20221128195956_CustomersInitialVersion")]
    partial class CustomersInitialVersion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("ContactCustomer", b =>
                {
                    b.Property<int>("ContactsID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomersID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ContactsID", "CustomersID");

                    b.HasIndex("CustomersID");

                    b.ToTable("ContactCustomer");
                });

            modelBuilder.Entity("Propeller.Entities.Contact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Propeller.Entities.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerStatusID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("CustomerStatusID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerStatusID = 1,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Customer One"
                        },
                        new
                        {
                            ID = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerStatusID = 1,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Customer Two"
                        },
                        new
                        {
                            ID = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerStatusID = 1,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Customer Three"
                        },
                        new
                        {
                            ID = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerStatusID = 1,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Customer Four"
                        },
                        new
                        {
                            ID = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerStatusID = 1,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Customer Five"
                        },
                        new
                        {
                            ID = 6,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerStatusID = 1,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Customer Six"
                        },
                        new
                        {
                            ID = 7,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerStatusID = 1,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Customer Seven"
                        },
                        new
                        {
                            ID = 8,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerStatusID = 1,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Customer Nine"
                        },
                        new
                        {
                            ID = 9,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerStatusID = 1,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Customer Ten"
                        },
                        new
                        {
                            ID = 10,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerStatusID = 1,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Customer Eleven"
                        },
                        new
                        {
                            ID = 11,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerStatusID = 1,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Customer Twelve"
                        },
                        new
                        {
                            ID = 12,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerStatusID = 1,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Customer Thirteen"
                        },
                        new
                        {
                            ID = 13,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerStatusID = 1,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Customer Fourteen"
                        });
                });

            modelBuilder.Entity("Propeller.Entities.CustomerStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("CustomerStatus");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            State = "prospective"
                        },
                        new
                        {
                            ID = 2,
                            State = "current"
                        },
                        new
                        {
                            ID = 3,
                            State = "non-active"
                        });
                });

            modelBuilder.Entity("Propeller.Entities.Note", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CustomerID = 1,
                            Text = "Note 1",
                            TimeStamp = new DateTime(2022, 11, 28, 19, 59, 56, 337, DateTimeKind.Utc).AddTicks(7070)
                        },
                        new
                        {
                            ID = 2,
                            CustomerID = 1,
                            Text = "Note 2",
                            TimeStamp = new DateTime(2022, 11, 28, 19, 59, 56, 337, DateTimeKind.Utc).AddTicks(7071)
                        });
                });

            modelBuilder.Entity("ContactCustomer", b =>
                {
                    b.HasOne("Propeller.Entities.Contact", null)
                        .WithMany()
                        .HasForeignKey("ContactsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Propeller.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Propeller.Entities.Customer", b =>
                {
                    b.HasOne("Propeller.Entities.CustomerStatus", "CustomerStatus")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerStatus");
                });

            modelBuilder.Entity("Propeller.Entities.Note", b =>
                {
                    b.HasOne("Propeller.Entities.Customer", "Customer")
                        .WithMany("Notes")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Propeller.Entities.Customer", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("Propeller.Entities.CustomerStatus", b =>
                {
                    b.Navigation("Customers");
                });
#pragma warning restore 612, 618
        }
    }
}
